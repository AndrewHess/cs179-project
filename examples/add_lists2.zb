(define int add_lists : list int a list int b list int c :
    (loop (val int i (lit 0))
          (call < : (get i) (get a.size))
          (set i (call + : (get i) (lit 1)))
    do
        (val int ai (list_at a (get i)))
        (val int bi (list_at b (get i)))
        (list_set c (get i) (call + : (get ai) (get bi)))
    )

    (lit 0)
)

(define int sum : list int a :
    (val int csum (lit 0))

    (loop (val int i (lit 0))
          (call < : (get i) (get a.size))
          (set i (call + : (get i) (lit 1)))
    do
        (val int ai (list_at a (get i)))
        (set csum (call + : (get csum) (get ai)))
    )

    (get csum)
)

(define int main : :
    (call srand : (call time : (lit 0)))

    (val int size (lit 16384))

    (list int a (get size))
    (list int b (get size))
    (list int c (get size))

    (loop (val int i (lit 0))
          (call < : (get i) (get a.size))
          (set i (call + : (get i) (lit 1)))
    do
        (list_set a (get i) (call % : (call rand : ) (get a.size)))
        (list_set b (get i) (call % : (call rand : ) (get b.size)))
    )

    (call add_lists : (get a) (get b) (get c))

    (val int sum_a (call sum : (get a)))
    (val int sum_b (call sum : (get b)))
    (val int sum_c (call sum : (get c)))

    (call print : (lit 'sum a: %d\n') (get sum_a))
    (call print : (lit 'sum b: %d\n') (get sum_b))
    (call print : (lit 'sum c: %d\n') (get sum_c))

    (if (call == : (get sum_c) (call + : (get sum_a) (get sum_b))) then
        (call print : (lit 'addition test passed\n'))
    else
        (call print : (lit 'addition test failed\n'))
    )

    (lit 0)
)